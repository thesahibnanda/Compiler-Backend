import random
import logging
from groq import Groq
from typing import List

class LlaMaUtils:
    
    @staticmethod
    def check_malicious_code_for_cpp(code: str, model_name: str, api_keys: List[str]) -> bool:
        prompt =  f"You are tasked with analyzing a C++17 code snippet to determine whether it contains any potentially malicious or harmful elements. The code is intended for competitive programming or development, so you should allow standard programming constructs such as complex loops, recursion, multithreading, and concurrency. Note a very very important information that as the codes will be for competitive programming, they can have useless driver code and can be very long using keywords like `auto` etc. and such codes will not be considered harmful or wrong. Standard libraries, including those for I/O (`cin`, `cout`), threading, and even the `sys` or `io` headers, may be used in their typical capacity. However, you must detect and flag code that attempts malicious actions or dangerous operations.\n\n### Instructions:\n1. **Allow the following:**\n    - Use of large loops, recursion, and multithreading as long as they are necessary for competitive programming or software development tasks.\n    - Typical competitive programming operations, including memory allocations, concurrency, and algorithmic functions.\n    - Standard input/output (`cin`, `cout`, `cerr`, etc.) and multithreading libraries.\n\n2. **Flag any of the following malicious patterns**:\n    - **Unauthorized System Access**: Attempts to access or modify critical system files, including any code that reads, writes, deletes, or modifies files outside the program's standard operations. Access to protected directories, critical system paths, or any OS-related environment variables should be flagged.\n    - **Execution of System Commands**: Use of `system()`, `exec()`, `fork()`, `popen()`, or other system calls that invoke shell commands, manage processes, or interact with the OS beyond standard requirements.\n    - **Network Connections**: Any code attempting to establish connections, interact with external IPs, or use networking libraries such as `socket` or related network APIs without explicit mention of legitimate use.\n    - **Resource Exhaustion Attacks**: Code that creates excessive processes or threads (e.g., fork bombs), or uses infinite or uncontrolled loops that intentionally consume excessive CPU or memory resources.\n\n3. **Specific Guidelines**:\n    - Standard concurrency practices and the use of threading or parallelism are allowed if they are necessary and contained within safe limits.\n    - Code that utilizes the `sys` or `io` headers, I/O streams, or handles basic system functions for competitive programming is safe.\n    - Avoid flagging any code that simply employs large or nested loops as part of legitimate algorithmic work, as these are common in competitive programming. User can be very smart and could name normal functions as bomb(), don't flag it and user can use threading but no harm should be happen to my system.\n\n### Response:\nAfter analyzing the code based on the above criteria, respond with **'yes'** if any malicious or dangerous operations are detected that violate the security guidelines above. If the code contains only safe programming practices, respond with **'no'**.\n\n### Code Snippet:\n{code}"
        
        client = Groq(api_key=random.choice(api_keys),)
        
        chat_completion = client.chat.completions.create(messages=[{"role": "user", "content": prompt, }],model=model_name,)

        return "yes" in chat_completion.choices[0].message.content.lower()
    
    
    @staticmethod
    def check_malicious_code_for_python(code: str, model_name: str, api_keys: List[str]) -> bool:
        prompt =  f"Analyze the following Python 3 code snippet carefully to determine if it contains any potentially malicious or harmful elements. This code is intended for competitive programming or software development, so you should allow standard practices such as complex loops, recursion, multithreading, and concurrency, as well as typical libraries like `os`, `sys`, and `io` for managing standard input/output. The use of these libraries is expected for handling input/output streams but must not be abused for malicious operations. Note a very very important information that as the codes will be for competitive programming, they can have useless driver code and can be very long using keywords like `auto` etc. and such codes will not be considered harmful or wrong.\n\n### Instructions:\n1. **Allow the following safe coding practices**:\n    - Use of `os`, `sys`, and `io` libraries for handling standard input/output, multithreading, or concurrency as needed for typical competitive programming or development tasks.\n    - Large loops, nested loops, and complex recursion are allowed as long as they are essential to the problem being solved.\n    - Code that requires threading or concurrent processing for legitimate, contained use cases.\n\n2. **Flag any of the following malicious patterns**:\n    - **Unauthorized File Access**: Any attempt to access, modify, or delete sensitive system files or directories outside the scope of the program’s immediate needs. File operations should only relate to handling standard input/output operations in competitive programming.\n    - **Execution of Dangerous Commands**: Use of functions such as `os.system`, `subprocess`, `eval`, `exec`, `fork`, or any command that could execute arbitrary code, access the shell, or alter the system environment beyond safe usage.\n    - **Network Connections**: Any code that attempts to connect to external IPs or servers, or uses libraries like `socket`, `requests`, or related networking APIs, unless explicitly specified as necessary for the code’s function.\n    - **Resource Exhaustion Attacks**: Code that could potentially overload the system, such as creating infinite processes, uncontrolled threading, or excessive recursion that has no termination condition.\n\n3. **Specific Guidelines**:\n    - Use of the `os`, `sys`, and `io` libraries should be considered safe as long as they are handling stdin/stdout, typical path operations, or programmatic control within reasonable competitive programming constraints.\n    - Avoid flagging nested loops, long recursion, or significant memory usage if they are essential for the algorithm’s purpose and do not indicate malicious intent. User can be very smart and could name normal functions as bomb(), don't flag it and user can use threading but no harm should be happen to my system.\n\n### Response:\nAfter analyzing the code based on the above criteria, respond with **'yes'** if any malicious or dangerous operations are detected that violate the security guidelines above. If the code contains only safe programming practices, respond with **'no'**.\n\n### Code Snippet:\n{code}"
        
        client = Groq(api_key=random.choice(api_keys),)
        
        chat_completion = client.chat.completions.create(messages=[{"role": "user", "content": prompt, }],model=model_name,)

        return "yes" in chat_completion.choices[0].message.content.lower()
